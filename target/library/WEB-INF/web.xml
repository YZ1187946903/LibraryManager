<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                            http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
	<!-- 1、配置 Spring 核心容器配置文件所在路径   -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath*:/applicationContext.xml
			classpath*:/applicationContext-shiro.xml
		</param-value>
	</context-param>
	<!-- 2、配置使用监听器监听 Web 容器（Tomcat）的启动:一启动那么就去加载 Spring 核心容器配置文件启动 Spring 核心容器  -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- 2.1配置监听器使系统中的 request 都合成到 Spring 的 request 线程中  -->
	<listener>
		<listener-class>
			org.springframework.web.context.request.RequestContextListener
		</listener-class>
	</listener>
	<!-- 3、配置 Spring MVC 核心 DispatchServlet 信息，使用 Servlet 启动 Spring MVC 框架  -->
	<servlet>
		<!--    (1)Spring MVC 启动后默认会去 WEB-INF 下读取自己的配置文件，该配置文件的命名规则为：
							<servlet-name> 的值连接上 -servlet.xml 形成其配置文件       -->
		<servlet-name>springmvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!--    (2)将 DispatcherServlet 的生命周期提前:默认情况下 Servlet 的实例化是在请求到来时才开始进行，
							因此对于 Spring MVC 框架来说，略显滞后。
						因此需要将 DispatcherServlet 的生命周期提前，提前到随着服务器的启动，就开始进行实例化。
				通过配置 load-on-startup 来修改，当所给定的值大于 0 时，就随着服务器的启动开始启动     -->
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>springmvc</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<!-- 4、配置 Spring Web 所提供的编码过滤器  -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<!-- (1)指定编码格式为 UTF-8 -->
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 5、配置 Shiro 安全认证过滤器  -->
	<filter>
		<!-- name 命名时applicationContext-shiro.xml配置文件中自己写的过滤器的 bean组件 id值-->
		<filter-name>shiroFilter</filter-name>
		<filter-class>
			org.springframework.web.filter.DelegatingFilterProxy
		</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>shiroFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- 6、去掉 Shiro 认证页面后的后缀 -->
	<session-config>
		<tracking-mode>COOKIE</tracking-mode>
	</session-config>
</web-app>